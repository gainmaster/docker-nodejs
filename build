#!/usr/bin/env bash

set -x              # Print command traces before executing command
trap 'exit 1' ERR   # Exit script with error if command fails

# Validate that docker exists
if [[ -z $(which docker) ]]; then
    echo "Missing docker client which is required for building, testing and pushing."
    exit 2
fi

# Set working directory to project root
cd $(dirname "${BASH_SOURCE[0]}")

# Declarations
declare IMAGE_NAME="bachelorthesis/nodejs"

# if not run as root user, docker needs sudo
if [[ $EUID -ne 0 ]]; then
    alias docker='sudo docker'
fi

# Build docker image
function build {
    docker build -t $IMAGE_NAME .
}

# Test docker image
function test {
	#docker history $IMAGE_NAME 2> /dev/null
    if [ $? -eq 1 ]; then
        echo "Cant test $IMAGE_NAME, the image does not exist."
        exit 2
    fi
    for test_file in test/*; do 
        bats $test_file    
    done
}

# Push docker image to docker hub
function push {
	docker history $IMAGE_NAME 2> /dev/null

    if [ $? -eq 1 ]; then
        echo "Cant push $IMAGE_NAME, the image does not exist."
        exit 2
    fi

    [ -z "$DOCKER_EMAIL" ]    && { echo "Need to set DOCKER_EMAIL";    exit 1; }
    [ -z "$DOCKER_USER" ]     && { echo "Need to set DOCKER_USER";     exit 1; }
    [ -z "$DOCKER_PASSWORD" ] && { echo "Need to set DOCKER_PASSWORD"; exit 1; }

    docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASSWORD
    docker push $IMAGE_NAME
}

# Handle user input, if no arguments are given, run all functions.
# Valid arguments are: make_rootfs, build, test and push
actions=("$@")
if [ ${#actions[@]} -eq 0 ]; then
    actions=(build test push)
fi

for action in "${actions[@]}"; do 
    case "$action" in
        build)
            build
            ;;
         
        test)
            test
            ;;

        push)
            push
            ;;
         
        *)
            echo $"Usage: $0 {build || test || push}"
            exit 1
    esac
done